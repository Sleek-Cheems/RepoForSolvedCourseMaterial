#%%
url1 = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm'

html_data = requests.get(url1).text
#%% md
Parse the html data using `beautiful_soup` using parser i.e `html5lib` or `html.parser`.

#%%
beautiful_soup = BeautifulSoup(html_data, 'html5lib')
#%% md
Using `BeautifulSoup` or the `read_html` function extract the table with `Tesla Quarterly Revenue` and store it into a dataframe named `tesla_revenue`. The dataframe should have columns `Date` and `Revenue`.

#%% md
<details><summary>Step-by-step instructions</summary>

```

Here are the step-by-step instructions:

1. Create an Empty DataFrame
2. Find the Relevant Table
3. Check for the Tesla Quarterly Revenue Table
4. Iterate Through Rows in the Table Body
5. Extract Data from Columns
6. Append Data to the DataFrame

```
</details>

#%% md
<details><summary>Click here if you need help locating the table</summary>

```
    
Below is the code to isolate the table, you will now need to loop through the rows and columns like in the previous lab
    
soup.find_all("tbody")[1]
    
If you want to use the read_html function the table is located at index 1

We are focusing on quarterly revenue in the lab.
```

</details>

#%%
#let's use pandas read_html which will help use get the tables directly as dataframes no need to extract text/content from every <td> and then append it to a dataframe
tables = pd.read_html(url1)
tesla_revenue = tables[1]
print(tesla_revenue.columns)
tesla_revenue = tesla_revenue.rename(columns={'Tesla Quarterly Revenue (Millions of US $)':'Date', 'Tesla Quarterly Revenue (Millions of US $).1':'Revenue'})
#%% md
Execute the following line to remove the comma and dollar sign from the `Revenue` column. 

#%%
tesla_revenue["Revenue"] = tesla_revenue["Revenue"].str.replace(r'[\$,]', "", regex=True)

#%% md
Execute the following lines to remove an null or empty strings in the Revenue column.

#%%
tesla_revenue.dropna(inplace=True)

tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]
#%% md
Display the last 5 row of the `tesla_revenue` dataframe using the `tail` function. Take a screenshot of the results.

#%%
tesla_revenue.tail()